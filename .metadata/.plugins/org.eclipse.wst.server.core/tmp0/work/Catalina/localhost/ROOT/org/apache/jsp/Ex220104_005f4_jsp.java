/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-01-07 01:58:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex220104_005f4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
	
	request.setCharacterEncoding("utf-8");
	/* setCharacterEncoding: 한글일 경우 utf-8로 언어설정을 함.(영어는 관계없음) */
	
	String sname = request.getParameter("sname");
	String spwd = request.getParameter("spwd");
	String sage = request.getParameter("sage");
	String sarea = request.getParameter("sarea");
	String syear = request.getParameter("syear");
	String shoby = request.getParameter("shoby");
	/* request : 클라이언트쪽에서 넘어오는 문자열 정보를 가져와 저장할수 있음.*/
	/* 어지간한 데이터베이스 및 정보 전달은 form으로 처리한다. */	
	
	/* 예외처리 하기 */
	/* 이름, 나이 */
	int iage = 0; 
	/* try 안에서 선언해버리면 밖에서는 사용할 수 없기때문에, 전역변수로 사용하기 위해서 try-catch 구문 밖에서 선언함.*/
	boolean flag = true; 
	// flag:예외처리 응용할때 쓰는 변수. 기본값 = 나이가 정상적으로 넘어옴.
	if(sname.trim().length() < 2){ 
	//trim: 이름의 왼쪽과 오른쪽에 있는 공백을 잘라내는 메서드 
		flag = false; 
		//공백을 잘라낸 길이가 2보다 작다면 false처리함.
	}
	
	try{
		iage = Integer.parseInt(sage); //정수형태의 문자열을 정수로 형변환 
		
		/* 이 부분에서 나이에 정수형이 들어오지 않으면 오류가 발생하므로 예외처리 구문 작성 */
	}catch(Exception e){
//		iage = 25; //잘못된 값이 넘어와 예외가 발생했을 경우 iage의 값을 디폴트 처리함.
		/* 예외처리의 응용 - 예외가 발생되면 이전 페이지로 넘김*/
		flag = false;
	}
	if(flag == false){ //예외가 발생했을 경우 
      out.write("\r\n");
      out.write("		<script>\r\n");
      out.write("			alert(\"입력 오류: 성명은 2글자이상 적어주세요\");\r\n");
      out.write("			history.back();//직전 페이지로 이동\r\n");
      out.write("		</script>		\r\n");

	}else{//정상인 경우 정보 출력.
		out.print("성명 : " + sname + "<br>");
		out.print("나이 : " + sage + "<br>");
		out.print("암호 : " + spwd + "<br>");
		out.print("지역 : " + sarea + "<br>");
		out.print("연도 : " + syear + "년도<br>");
		out.print("취미 : " + shoby + "<br>");
	}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
