/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-01-11 02:31:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class update_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>update</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	request.setCharacterEncoding("UTF-8"); 
	//parameter를 받을 때는 한글이 깨지는것을 막기 위해 무조건 적어주자.
	String b_num = request.getParameter("b_num"); //Get방식에 의한 전송

      out.write("	\r\n");
      out.write("	<h3>수정 페이지</h3>\r\n");
      out.write("	<a href=\"./list.jsp\">리스트로 돌아가기</a>\r\n");
      out.write("	<a href=\"./view.jsp?b_num=");
      out.print(b_num);
      out.write("\">상세보기로 돌아가기</a><br><br>\r\n");
      out.write("	<!-- 링크에 페이지구분값 Get방식으로 가져오기: 기존 링크?값이름=<print> -->\r\n");
	
	/* 항상 이 3개의 객체는 전역변수로 선언해 놓아야 함. */
	Connection conn = null; //접속 객체를 null값으로 생성 선언
	PreparedStatement pstmt = null; //쿼리 객체 선언
	ResultSet rs = null; //쿼리 결과를 가져오는 객체 선언
	String query = ""; //sql 문법 선언
	
	try{
		Class.forName("com.mysql.jdbc.Driver"); /* 드라이버를 로드함 */
		//out.print("드라이버 로드 성공"); 로드 성공 후 주석처리함
		String url = "jdbc:mysql://localhost:3306/mysql";
		//접속 url로 mysql dbname은 변경될 수 있다.
		String user = "root"; //root라는 유저가
		String passwd = ""; // 다음과 같은 비밀번호로
		conn = DriverManager.getConnection(url, user, passwd);
		//연결(접속)한다.
		//out.print(conn + "<br>"); 연결성공 확인 후 주석처리함
		
		/* 현재 이 파트에서 가장 중요한 코드: query */
		query = "select * from tblboard where b_num = ?";
		// ? 넘어온 값을 말함
		pstmt = conn.prepareStatement(query);//쿼리 객체 생성
		//문자열은 casting이 되지 않음(기본 데이터 타입만 됨) 따라서 wrapping?을 해줘야함
		/*래퍼클래스(Wrapper class)
		 Byte, Short, Integer, Long, Float, Double, Character, Boolean
		 래퍼클래스는 따로 변수 선언 없이 스태틱메서드(parseInt)를 통해 변환한다.*/
		
		pstmt.setInt(1,Integer.parseInt(b_num));
		
		rs = pstmt.executeQuery(); 
		//쿼리를 실행하여 결과를 rs에 받아서 num값에 맞는 정보 하나만 이동시켜야함 
		/* rs객체는 여러개의 레코드가 포함되어 있을 수 있음*/
		rs.next(); //첫번째 레코드로 이동시키는 메서드
		/*한번 더 쓰면 두번째로 이동하지만, 현재는 한개의 값만 검출되었기 때문에 한번만 씀.
		  따라서 while 루프 또한 필요 없음.*/
		String b_subject = rs.getString("b_subject");
		String b_name = rs.getString("b_name");
		String b_contents = rs.getString("b_contents");
		String b_date = rs.getString("b_date");

      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<form action=\"./update_end.jsp\" method=\"post\">\r\n");
      out.write("		<table border=\"1\" style=\"border-collapse:collapse; margin:auto; width:80%\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td align = \"center\" width=\"10%\">글번호</td>\r\n");
      out.write("			\r\n");
      out.write("			<!-- 글번호는 구분을 위해 input tag로 값을 받아 update form으로 넘기지만, \r\n");
      out.write("			수정은 하지 못하게 해야하므로 값을 value값으로 넣어서 보여주고\r\n");
      out.write("			읽을수만 있는 속성인 readonly를 준다. -->\r\n");
      out.write("			<td align = \"center\" width=\"10%\">\r\n");
      out.write("			<input type=\"text\" name=\"b_num\" value=\"");
      out.print( b_num );
      out.write("\" readonly></td>\r\n");
      out.write("			<td align = \"center\" width=\"15%\">작성자</td>\r\n");
      out.write("			<td align = \"center\" width=\"15%\">\r\n");
      out.write("			<input type=\"text\" name=\"b_name\" value=\"");
      out.print( b_name );
      out.write("\"></td>\r\n");
      out.write("			\r\n");
      out.write("			<!-- 작성일의 경우 수정할 필요가 없으므로 보여주기만 한다.\r\n");
      out.write("				 단, 이 경우 b_date값이 post로 넘어가지는 않는다.  -->\r\n");
      out.write("			<td align = \"center\" width=\"20%\">작성일</td>\r\n");
      out.write("			<td align = \"center\" width=\"30%\">");
      out.print( b_date );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td align = \"center\" width=\"50\">제목</td>\r\n");
      out.write("			<td align = \"center\" colspan=\"5\">\r\n");
      out.write("			<input type=\"text\" name=\"b_subject\" value=\"");
      out.print( b_subject );
      out.write("\"></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td align = \"center\" width=\"50\">내용</td>\r\n");
      out.write("			<td align = \"center\" colspan=\"5\">\r\n");
      out.write("			<textarea name=\"b_contents\" rows=\"10\" style=\"width:95%\">");
      out.print( b_contents );
      out.write("</textarea></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("		<td align = \"center\" colspan=\"6\">\r\n");
      out.write("			<input type=\"submit\" value=\"[수정]\" style= \"margin:5px;\">\r\n");
      out.write("			<a href=\"./delete.jsp?b_num=");
      out.print( b_num );
      out.write("\" style= \"margin:5px;\">[삭제]</a>\r\n");
      out.write("		</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		</form>\r\n");
		
	}catch(Exception e){
		out.print(e); //오류가 발생했을때, 페이지를 옮겨보리는 js코드를 삽입하는 곳.
	//finally : 리소스 반납하기	
	}finally{ //finally문에서도 예외처리를 해야 하므로 try-catch문을 작성
		try{
			if(rs != null)
				rs.close();
			if(pstmt != null)
				pstmt.close();
			if(conn != null)	
			conn.close();
		}catch(Exception ex){
			
		}
	}

      out.write("	\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
